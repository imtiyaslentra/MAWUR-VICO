-- Initialization
local Stats = game:GetService('Stats')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Workspace = game:GetService('Workspace')
local CoreGui = game:GetService('CoreGui')
local UserInputService = game:GetService("UserInputService")

-- Load Libraries
local function loadLibrary(url)
    local success, library = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    if not success then
        warn("Failed to load library from " .. url)
        return nil
    end
    return library
end

local Nurysium_Util = loadLibrary('https://raw.githubusercontent.com/flezzpe/Nurysium/main/nurysium_helper.lua')
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/lxte/lates-lib/main/Main.lua"))()


if not Nurysium_Util or not library then
    return -- Exit if libraries fail to load
end

-- Player and Camera
local local_player = Players.LocalPlayer
local camera = Workspace.CurrentCamera

-- Global Variables
getgenv().aura_Enabled = true
getgenv().hit_sound_Enabled = false
getgenv().hit_effect_Enabled = false
getgenv().optimize_Enabled = false
getgenv().autoSpam_Enabled = true
getgenv().antiCurve_Enabled = false
getgenv().visualizer_Enabled = true

-- Learning Data Initialization
local learningData = {
    failedAttempts = 0,
    successfulParries = 0,
    lastFailureTime = 0,
    lastSuccessTime = 0
}

-- Utility Functions
local nurysium_Data = nil
local hit_Sound = nil
local closest_Entity = nil
local originalParryRemote
local originalResolveParryRemote 

local function initialize_hit_sound(dataFolder_name)
    nurysium_Data = Instance.new('Folder', CoreGui)
    nurysium_Data.Name = dataFolder_name

    hit_Sound = Instance.new('Sound', nurysium_Data)
    hit_Sound.SoundId = 'rbxassetid://6349641063'
    hit_Sound.Volume = 5
end

local function get_closest_entity(object)
    local closest
    local max_distance = math.huge

    for _, entity in pairs(Workspace:FindFirstChild('Alive'):GetChildren()) do
        if entity:IsA('Model') and entity:FindFirstChild('HumanoidRootPart') and entity.Name ~= local_player.Name then
            local distance = (object.Position - entity.HumanoidRootPart.Position).Magnitude
            if distance < max_distance then
                closest_Entity = entity
                max_distance = distance
            end
        end
    end

    return closest_Entity
end

function resolve_parry_Remote()
 local temp_remote = game:GetService("VirtualUser"):WaitForChild("\n\n\n\n\n")

    if not temp_remote then
        return
    end

    if not temp_remote:IsA('RemoteEvent') then
        return
    end

    originalParryRemote = temp_remote
end

resolve_parry_Remote()

-- Event Handlers
if ReplicatedStorage:FindFirstChild('Remotes') and ReplicatedStorage.Remotes:FindFirstChild('ParrySuccess') then
    ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
        if getgenv().hit_sound_Enabled then
            hit_Sound:Play()
        end

        if getgenv().hit_effect_Enabled then
            local hit_effect = game:GetObjects("rbxassetid://17407244385")[1]
            if hit_effect then
                hit_effect.Parent = Nurysium_Util.getBall()
                hit_effect:Emit(4)

                task.delay(5, function()
                    if hit_effect and hit_effect.Parent then
                        hit_effect:Destroy()
                    end
                end)
            end
        end

        learningData.successfulParries = learningData.successfulParries + 1
        learningData.lastSuccessTime = tick()
    end)
else
    warn("ReplicatedStorage.Remotes.ParrySuccess not found.")
end

local aura_table = {
    canParry = true,
    is_Spamming = false,
    parry_Range = 0,
    spam_Range = 0,
    hit_Count = 0,
    hit_Time = tick(),
}

if ReplicatedStorage:FindFirstChild('Remotes') and ReplicatedStorage.Remotes:FindFirstChild('ParrySuccessAll') then
    ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()
        aura_table.hit_Count = aura_table.hit_Count + 1
        task.delay(0.15, function()
            aura_table.hit_Count = aura_table.hit_Count - 1
        end)
    end)
else
    warn("ReplicatedStorage.Remotes.ParrySuccessAll not found.")
end

if Workspace:FindFirstChild("Balls") then
    Workspace.Balls.ChildRemoved:Connect(function(child)
        aura_table.hit_Count = 0
        aura_table.is_Spamming = false
    end)
else
    warn("Workspace.Balls not found.")
end

-- Visualizer Functions
local visualizer
local originalSize = 10
local maxSize = 100

local function createVisualizer()
    if visualizer then
        visualizer:Destroy()
    end

    visualizer = Instance.new("Part")
    visualizer.Shape = Enum.PartType.Ball
    visualizer.Size = Vector3.new(originalSize, originalSize, originalSize)
    visualizer.Anchored = true
    visualizer.CanCollide = false
    visualizer.Material = Enum.Material.ForceField
    visualizer.BrickColor = BrickColor.new("Bright green")
    visualizer.Transparency = 0.7
    visualizer.Parent = Workspace

    RunService.Heartbeat:Connect(function()
        if visualizer and local_player and local_player.Character and local_player.Character.PrimaryPart then
            visualizer.CFrame = local_player.Character.PrimaryPart.CFrame
        end
    end)
end

local function updateVisualizerSize(ball_Speed)
    if visualizer then
        local newSize = math.clamp(originalSize + (ball_Speed / 100), originalSize, maxSize)
        visualizer.Size = Vector3.new(newSize, newSize, newSize)
        aura_table.parry_Range = newSize * 10
    end
end

local function updateVisualizer(isTargeted)
    if visualizer then
        visualizer.BrickColor = isTargeted and BrickColor.new("Bright red") or BrickColor.new("Bright green")
    end
end

-- Enhanced Auto-Spam Function
local autoSpam_Threshold = 20
local speed_Check_Interval = 0.1
local autoSpam_Detection_Threshold = 15 -- Threshold for detecting spam

local function updateAutoSpamBasedOnSpeedAndDistance()
    local self = Nurysium_Util.getBall()
    if not self then
        return
    end

    local ball_Velocity = self.AssemblyLinearVelocity
    local ball_Speed = ball_Velocity.Magnitude
    local ball_Position = self.Position
    local player_Position = local_player.Character.PrimaryPart.Position
    local ball_Distance = (player_Position - ball_Position).Magnitude

    -- Update auto spam settings based on speed and distance
    local min_Speed_Threshold = 20
    local min_Distance_Threshold = 10

    if ball_Speed > min_Speed_Threshold and ball_Distance < min_Distance_Threshold then
        aura_table.is_Spamming = true
    else
        aura_table.is_Spamming = false
    end
end

local function detectAutoSpam()
    local spamCount = 0
    while true do
        task.wait(speed_Check_Interval)

        if aura_table.is_Spamming then
            spamCount = spamCount + 1
            if spamCount > autoSpam_Detection_Threshold then
                warn("Auto-Spam Detected!")
                -- Handle detection logic (e.g., notify user, adjust settings)
            end
        else
            spamCount = 0
        end
    end
end

task.spawn(function()
    while true do
        if getgenv().autoSpam_Enabled then
            updateAutoSpamBasedOnSpeedAndDistance()

            local hit_Count = aura_table.hit_Count
            local hit_Threshold = 2

            if hit_Count > hit_Threshold then
                aura_table.is_Spamming = true
            end

            local self = Nurysium_Util.getBall()
            if self then
                updateVisualizerSize(self.AssemblyLinearVelocity.Magnitude)
            end
        end
        task.wait(speed_Check_Interval)
    end
end)

-- Adaptive Auto Parry Logic
local function predictParryPosition(ball_Position, ball_Velocity, ping)
    local timeToImpact = (ball_Position - local_player.Character.PrimaryPart.Position).Magnitude / ball_Velocity.Magnitude
    local predicted_Position = ball_Position + (ball_Velocity * timeToImpact)
    return predicted_Position
end

task.spawn(function()
    RunService.PreRender:Connect(function()
        if not getgenv().aura_Enabled then
            return
        end

        if closest_Entity then
            local entity_root = Workspace:FindFirstChild('Alive'):FindFirstChild(closest_Entity.Name)
            if entity_root and entity_root:FindFirstChild('Humanoid') and entity_root.Humanoid.Health > 0 then
                if aura_table.is_Spamming then
                    if local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position) <= aura_table.spam_Range then
                        if parry_remote then
                            local target_position = closest_Entity.HumanoidRootPart.Position
                            if getgenv().antiCurve_Enabled then
                                target_position = camera.CFrame.Position + (target_position - camera.CFrame.Position).Unit * (local_player:DistanceFromCharacter(target_position) - 5)
                            end
                            originalParryRemote:FireServer(
                                0.5,
                                CFrame.new(camera.CFrame.Position, Vector3.zero),
                                {[closest_Entity.Name] = target_position},
                                {target_position.X, target_position.Y},
                                false
                            )
                        end
                    end
                end
            end
        end
    end)

    RunService.PreRender:Connect(function()
        if not getgenv().aura_Enabled then
            return
        end

        local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
        local self = Nurysium_Util.getBall()

        if not self then
            return
        end

        self:GetAttributeChangedSignal('target'):Once(function()
            aura_table.canParry = true
        end)

        if getgenv().visualizer_Enabled then
            updateVisualizer(self:GetAttribute('target') == local_player.Name)
            local ball_Velocity = self.AssemblyLinearVelocity
            updateVisualizerSize(ball_Velocity.Magnitude)
        end

        if self:GetAttribute('target') ~= local_player.Name or not aura_table.canParry then
            return
        end

        get_closest_entity(local_player.Character.PrimaryPart)

        local player_Position = local_player.Character.PrimaryPart.Position
        local ball_Position = self.Position
        local ball_Velocity = self.AssemblyLinearVelocity

        local ball_Direction = (player_Position - ball_Position).Unit
        local ball_Distance = local_player:DistanceFromCharacter(ball_Position)
        local ball_Speed = ball_Velocity.Magnitude

        local predicted_Target_Position = predictParryPosition(ball_Position, ball_Velocity, ping)
        local parry_Distance = math.max(math.max(ping, 4) + ball_Speed / 3.5, 9.5)
        local parry_Position = camera.CFrame.Position + (ball_Direction * parry_Distance)

        aura_table.spam_Range = math.max(ping / 10, 15) + ball_Speed / 7
        aura_table.parry_Range = parry_Distance
        aura_table.is_Spamming = aura_table.hit_Count > 1 or ball_Distance < 13.5

        if ball_Distance <= aura_table.parry_Range and not aura_table.is_Spamming then
            if parry_remote then
                local target_position = predicted_Target_Position
                if getgenv().antiCurve_Enabled then
                    target_position = camera.CFrame.Position + (target_position - camera.CFrame.Position).Unit * (local_player:DistanceFromCharacter(target_position) - 5)
                end
                originalParryRemote:FireServer(
                    0.5,
                    CFrame.new(camera.CFrame.Position, target_position),
                    {[closest_Entity.Name] = target_position},
                    {target_position.X, target_position.Y},
                    false
                )
            end

            aura_table.canParry = false
            aura_table.hit_Time = tick()
            aura_table.hit_Count = aura_table.hit_Count + 1

            task.delay(0.15, function()
                aura_table.hit_Count = aura_table.hit_Count - 1
            end)
        end

        task.spawn(function()
            repeat
                RunService.PreRender:Wait()
            until (tick() - aura_table.hit_Time) >= 1
            aura_table.canParry = true
        end)
    end)
end)

initialize_hit_sound('nurysium_temp')

local UserInputService = game:GetService("UserInputService")

--// Library
local Window = Library:CreateWindow({
    Title = "Vico Hub - Blade ball",
    Theme = "Dark",
    Size = UDim2.fromOffset(570, 370),
    Transparency = 0.2,
    Blurring = true,
    MinimizeKeybind = Enum.KeyCode.LeftAlt,
})

-- Sections
Window:AddSection({ Name = "Parry", Tab = Main })
Window:AddToggle({
    Title = "Autoparry",
    Description = "Parry the ball [Still Build Up Worth 90%]",
    Tab = Main,
    Callback = function(state)
        getgenv().aura_Enabled = state
    end,
})
Window:AddToggle({
    Title = "Autospam",
    Description = "Toggles Autospam when near player(only works on clash)",
    Tab = Main,
    Callback = function(state)
        getgenv().autoSpam_Enabled = state
    end,
})

Window:AddSection({ Name = "Misc", Tab = Main })
Window:AddToggle({
    Title = "Anti Curve",
    Description = "When spamming/parry it cancels out the Curve",
    Tab = Main,
    Callback = function(state)
        getgenv().antiCurve_Enabled = state
    end,
})

Window:AddSection({ Name = "Show Debug", Tab = Main })
Window:AddToggle({
    Title = "Visualizer",
    Description = "see the Parry/Spam range",
    Tab = Main,
    Callback = function(state)
        getgenv().visualizer_Enabled = state
        if state then
            createVisualizer()
        else
            if visualizer then
                visualizer:Destroy()
                visualizer = nil
            end
        end
    end,
})

local Player = Window:AddTab({
    Title = "Player",
    Section = "Player",
    Icon = "rbxassetid://11963373994",
})

-- FPS Booster
local isFPSBoosterEnabled = false  -- Status awal FPS booster

local function enableFPSBooster()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
            obj.Enabled = false
        elseif obj:IsA("Decal") or obj:IsA("Texture") then
            obj:Destroy()
        elseif obj:IsA("BasePart") and (obj.Material == Enum.Material.Grass or obj.Material == Enum.Material.LeafyGrass) then
            obj.Transparency = 1
        end
    end

    local Lighting = game:GetService("Lighting")
    Lighting.GlobalShadows = false
    Lighting.Brightness = 0
    Lighting.ClockTime = 12
    Lighting.FogEnd = 9e9
    Lighting.EnvironmentDiffuseScale = 0
    Lighting.EnvironmentSpecularScale = 0
    Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)

    local player = game.Players.LocalPlayer
    player.CharacterAdded:Connect(function(character)
        for _, accessory in pairs(character:GetChildren()) do
            if accessory:IsA("Accessory") or accessory:IsA("Clothing") or accessory:IsA("ShirtGraphic") then
                accessory:Destroy()
            end
        end
    end)
end

local function disableFPSBooster()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Automatic
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
            obj.Enabled = true
        elseif obj:IsA("BasePart") and (obj.Material == Enum.Material.Grass or obj.Material == Enum.Material.LeafyGrass) then
            obj.Transparency = 0
        end
    end

    local Lighting = game:GetService("Lighting")
    Lighting.GlobalShadows = true
    Lighting.Brightness = 2
    Lighting.ClockTime = 14
    Lighting.FogEnd = 1000
    Lighting.EnvironmentDiffuseScale = 1
    Lighting.EnvironmentSpecularScale = 1
    Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
end

Window:AddToggle({
    Title = "FPS Booster",
    Description = "Reduce Quality game(not remove sword effect)",
    Tab = Player,
    Callback = function(state)
        isFPSBoosterEnabled = state
        if isFPSBoosterEnabled then
            enableFPSBooster()
        else
            disableFPSBooster()
        end
    end,
})

-- WalkSpeed Slider
Window:AddSlider({
    Title = "WalkSpeed",
    Description = "Set the WalkSpeed of your character (default: 16)",
    Tab = Player,
    AllowDecimals = false,
    MaxValue = 100,
    MinValue = 0,
    DefaultValue = 16,
    Callback = function(Amount)
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Amount
        end
        Window:SetSetting("WalkSpeed", Amount)
    end,
})

Window:AddToggle({
    Title = "Optimize V2",
    Description = "if you don't want lag, then turn this on, it might help",
    Tab = Player,
    Callback = function(state)
        getgenv().optimize_Enabled = state
    end,
})

Window:Notify({
    Title = "Welcome to Vico Hub, hope you like it",
    Description = "Press Left Alt or The Image To Minimize The Window.",
    Duration = 10,
})

-- GUI Configuration
local ScreenGui = Instance.new("ScreenGui")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
ImageButton.Size = UDim2.new(0, 50, 0, 50)
ImageButton.Image = "rbxassetid://15302652530"
ImageButton.Draggable = true

UICorner.Parent = ImageButton

ImageButton.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.LeftAlt, false, game)
end)

print("Loading Successful! 😹💥")

-- Optimization Function
local Optimizer = {}
Optimizer.Interval = 1
Optimizer.FPSBoost = 10

local function OptimizePerformance()
    if not getgenv().optimize_Enabled then
        return
    end

    while true do
        if getgenv().optimize_Enabled then
            task.wait(Optimizer.Interval)
            local fps = Stats.RenderFPS
            if fps < Optimizer.FPSBoost then
                UserInputService.GamepadEnabled = false
            end
        end
    end
end

OptimizePerformance()

-- Adaptive Learning Function
local function adaptStrategy()
    if tick() - learningData.lastFailureTime < 60 then
        autoSpam_Threshold = autoSpam_Threshold * 0.9
    elseif tick() - learningData.lastSuccessTime > 300 then
        autoSpam_Threshold = autoSpam_Threshold * 1.1
    end

    learningData.failedAttempts = 0
end

task.spawn(function()
    while true do
        adaptStrategy()
        task.wait(10)
    end
end)

-- Start auto-spam detection
task.spawn(detectAutoSpam)

print("Kys!?")
